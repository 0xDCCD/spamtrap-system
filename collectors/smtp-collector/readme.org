* smtp-collector
A dockerized setup to build a so-called /Fake Destination SMTP Server/, which collects spam mails directed at any mailbox of a set of domains, which are flexibly to configure. This dockerized component consists of a specific [[http://www.postfix.org/][Postfix]] configuration, which relays those messages to a Python built catchall [[https://tools.ietf.org/html/rfc2033][LMTP]] server, that sends the received mails to a message broker via the transport protocol [[https://hpfeeds.org/][hpfeeds]].

** Motivation
In the created spamtrap-system the smtp-collector functions as a component to collect spam mails directed at any mailbox of a set of domains. After receiving those messages they will be sent via an intermediary message broker to all subscribers of the channel - namely the processing backend server(s) - in an authenticated and integrity protected manner as a JSON-object formed like this

#+begin_src JSON
{
  "sha256": "sha256_hexdigest",
  "msg": "rfc5322_data_in_utf8"
}
#+end_src

[[http://www.postfix.org/][Postfix]] is chosen, because it is a battle-tested MTA, which serves as a bastion host in front of the receiving mail server, which was built with the Python library [[https://github.com/cole/aiosmtplib][aiosmtplib]]. [[https://tools.ietf.org/html/rfc2033][LMTP]] was chosen to keep things simple and leave the queuing up to Postfix.


#+html: <p align="center"><img width="500" src="../../docs/img/smtp-collector.svg"></p>

The whole deployment of the /Fake Destination SMTP Server/ is realized with the help of [[https://docs.docker.com/compose/][Docker]] and [[https://docs.docker.com/compose/][docker-compose]]. Therefore it is very easy to setup this collector and to start receiving and transferring malspam. By doing so all unnecessary complexity is hidden by abstraction and only the relevant bits of configuration are exposed.

** Dependencies
smtp-collector requires the following Python packages, which are specified in [[https://github.com/jgru/spamtrap-system/blob/main/collectors/imap-collector/requirements.txt][requirements.txt]]:

- aiosmtpd==1.2.2
- atpublic==2.1.1
- hpfeeds==3.0.0
- mailbox==0.4
- PyYAML==5.3.1

** Using the dockerized setup
The Postfix server as well as the catchall LMTP server are defined as Dockerfiles for a simple setup. The orchestration of those two containers is done by using ~docker-compose~.

*** Modify config

*** Build and run


** Using the catchall LMTP server
*** Installation
 Use Python package installer [[https://github.com/pypa/pip][pip]] to install the a/m requirements:

 #+begin_src
 pip3 install -r catchall-lmtp/requirements.txt
 #+end_src

 Consider installing tho dependencies in a virtualenv like this

 #+begin_src
 # Install virtualenv package
 sudo pip3 install virtualenv

 # Create virtualenv by specifying a specific interpreter
 virtualenv -p /usr/bin/python3.7 catchall_lmtp_venv

 # Activate newly created venv
 source catchall_lmtp_venv/bin/activate

 # Install imap-collector's requirements
 pip3 install -r catchall-lmtp/requirements.txt

 # Run it
 python3.8 catchall_lmtp.py -h

 # Deactivate venv
 deactivate
 #+end_src

*** Usage
**** Config files
 Two config files are used: ~feed_config.yml~ and ~mailbox_credentials_template.yaml~

***** Configuration for hpfeeds
 ~feed_config.yml~ stores the needed configuration for submitting mails to the [[https://hpfeeds.org/brokers][hpfeeds-broker]]

 #+begin_src yaml
 ---  # Broker config
   broker: "127.0.0.1"
   port: 10_000
   identity: "writer"
   secret: "secret"
   channels:
     - "spam.mails"
 #+end_src

***** Configuration of mailboxes
 Each entry in the ~mailbox_credentials_template.yaml~ defines a spamtrap mailbox to query during the retrieval process. The following snippet illustrates how to setup the spamtrap mailboxes:

 #+begin_src yaml
 --- # Mailbox configs
 - username:  "user@domain"
   password:  "secret"
   protocol: "imap"
   host: "mail.mailserver.com"
   port:  993
 - username:  "user@domain"
   password:  "secret"
   protocol: "imap"
   host: "mail.mailserver.com"
   port:  143
 #+end_src

**** Commandline arguments
 Specifying the path to the ~--feed-config~-YAML-file is neccessary, as well as specifying the ~--mailbox-config~-file containing the IMAP mailboxes to query. ~aioimap_collector.py~ can be used to fetch new mails/all mails (~-a~) a single time or continuosly (~-c~). See the help page for a full reference.

 #+begin_src
 aioimap_collector.py -h
 usage: aioimap_collector.py [-h] [-f FEED_CONFIG] [-m MAILBOX_CONFIG] [-a] [-d] [-c]

 Retrieves emails from an IMAP server in an async manner. Tested with gmail and dovecot.

 optional arguments:
   -h, --help            show this help message and exit
   -f FEED_CONFIG, --feed-config FEED_CONFIG
			 Config file in yaml syntax specifying broker to use
   -m MAILBOX_CONFIG, --mailbox-config MAILBOX_CONFIG
			 Config file in yaml syntax specifying mailboxes to query
   -a, --fetch-all       Fetch all messages in INBOX, otherwise fetch only, unseen msgs
   -d, --delete          Delete messages after fetch (doublecheck, that broker is available!)
   -c, --continuous-fetch
			 Perform single fetch only, otherwise fetcher runs continuosly

 #+end_src
