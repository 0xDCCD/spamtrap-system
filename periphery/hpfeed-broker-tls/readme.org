* hpfeeds-broker

** Motivation
There are three implementations of [[https://hpfeeds.org/brokers][hpfeeds-brokers]] ranging from Python, Go and C++. The most easy one to use is the Python broker, which brings TLS support out of the box [fn:1]. Unfortunately this broker is not as performant as the other implementations, furtheron it does only support a message size of 1024^2 bytes [fn:2], although the hpfeeds-protocol supports payloads up to 2^32 bytes.

Neither the Go implementation called [[https://github.com/d1str0/HPFBroker][HPFBroker]] nor the C++-implementation called [[https://github.com/tentacool/tentacool][tentacool]] support TLS out of the box. Therefore a dockerized setup was created, which places [[https://github.com/tentacool/tentacool][tentacool]] behind a [[https://github.com/haproxy/haproxy][haproxy]] instance, which functions as a reverse proxy to provide TLS encryption.

** Usage
The environment variables for docker-compose are stored in the file [[file:.env][.env]], here you can adapt port numbers, filenames for the certificate to use and the IP-addresses of the containers in their private networks.

*** Preparations
The following modifications are necessary in order to use the setup:

**** Modify tentacool's credential-file
Usage is very easy, you have to adjust a .csv-file called [[file:tentacool/data/auth_keys.dat][auth_keys.dat]], which contains the hpfeeds credentials for the subscribers and publishers, who want to connect to the broker [fn:3].

#+begin_src bash
# Add credentials to the auth_keys.dat-file
nano ./tentacool/data/auth_keys.dat
#+end_src

**** Create your certificates
The certificates are expected to be placed in [[file:certs/][./certs]]. ~haproxy~ expects that the private key is named exactly like the public key but with a ~.key~ suffix. If you choose another name than ~certificate~, than modify the variable ~$CERT~, which is specified inside the environment variable file [[file:.env][.env]].

I.e.:
#+begin_src
cp *.pem ./certs
mv fullchain.pem certificate
mv privkey.pem certificate.key
#+end_src

Note, that if you use a CA like Let's Encrypt you have to place the ~fullchain.pem~-file, which contains the whole CA trail, in the a/m directory [fn:4]. Theoretically you could use a self-signed cert as well [fn:5].

*** Run it
After following the a/m steps run the setup with the following command:
#+begin_src bash
docker-compose build && docker-compose up --force-recreate
#+end_src

*** Test
Test the functionality with valid certificate (e.g. from Let's Encrypt) like so:
#+begin_src bash
hpfeeds subscribe --tls --host hostname.tld -p 10000 -i "reader" -s "secret" -c "ch1"
#+end_src


Test the functionality with a self-signed certificate [fn:6] like so:
#+begin_src bash
hpfeeds subscribe --tls --host hostname -p 10000 -i "reader" -s "secret" -c "ch1" --tlscert=path/to/self-signed-cert.crt
#+end_src

* Footnotes

[fn:1] See https://python.hpfeeds.org/en/latest/broker.html

[fn:2] See https://github.com/hpfeeds/hpfeeds/blob/2ca4b7a9271b3b9f46a8210050e0500d0b0bbef4/hpfeeds/protocol.py#L20

[fn:3] In the future MongoDB support could be added, which tentacool supports by using libpoco.

[fn:4] Its import to use Lets Encrypts fullchain.pem in Docker file -> Error: otherwise certificate verify failed: unable to get local issuer certificate (_ssl.c:1108)

[fn:5] Create it with this command i.e.: ~openssl req -x509 -newkey rsa:2048 -keyout broker.key -nodes -out broker.crt -sha256 -days 1000~

[fn:6] Check hostname via ~cat cert | openssl x509 -text | less~
