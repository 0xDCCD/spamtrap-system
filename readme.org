* spamtrap-system
Collection of tools to build and run a distributed spamtrap system, consisting of IMAP- as well as SMTP-collectors, a fake open smtp relay and a backend, which automatically extracts and analyzes malware found in the malspam messages with the help of [[https://github.com/cuckoosandbox/cuckoo][Cuckoo]] and [[https://github.com/buffer/thug][Thug]]. The end goal is to extract information about infrastructure used by malware, which is accomplished by evaluating the results given by the sandbox and utilizing [[https://github.com/JPCERTCC/MalConfScan][MalConfScan]]. Results are persisted a [[https://www.mongodb.com/][MongoDB]] instance. To assist analysis relevant results are pushed into [[https://www.elastic.co/elasticsearch/][Elasticsearch]] with a [[https://www.elastic.co/kibana][Kibana]] frontend[1]. The project aims to be modular to a large extent, so that further collectors, e.g. server honeypots, or reporting components could be added easily.

** Motivation
At the time of writing *malspam* is the prevalent method of spreading malware. [1]  Malspam is defined as follows:

"Malspam, short for malware spam or malicious spam, is spam email that delivers malware. While regular spam is simply
any unsolicited email, malspam contains infected attachments, phishing messages, or malicious URLs. It can also deliver
a myriad of malware types, including ransomware, Trojans, bots, info-stealers, cryptominers, spyware, and keyloggers." [2]

To be able to acquire and disseminate threat intelligence and therefore to be able to mitigate the risks, it is important to collect malspam and form IoCs. The developed spamtrap system streamlines the whole process with the help of distributed components and the renowned open source tools [[https://github.com/cuckoosandbox/cuckoo][Cuckoo]] and [[https://github.com/buffer/thug][Thug]].

** Architecture

*** Overview
The following figure illustrates the high-level architecture and the interaction of the distributed components.

#+html: <p align="center"><img width="800" src="docs/img/spamtrap-architecture.svg"></p>

Mail is collected by different collectors, which can be deployed in the cloud without much effort, then sent to a message broker by utilizing the publich-subscribe protocol [[https://hpfeeds.org/wire-protocol][hpfeeds]]. The backend acts as a subscriber the hpfeeds channel, in which the spam mails are pushed into. It tokenizes those mails, extracts attachments and downloads files from the URLs, which are mentioned inside the mail body, with the help of the honeyclient [[https://github.com/buffer/thug][Thug]] - its Python API to be more specific. Archives are extracted, even when locked with a password (if it is mentioned in the mail body), and executable files are then submitted into the open source malware analysis sandbox [[https://github.com/cuckoosandbox/cuckoo][Cuckoo]] by using its REST API.

*** Results
Results, like the identified spam SMTP servers, malware distribution sites and command-and-control servers will be extracted and will be stored in the document store [[https://www.mongodb.com/][MongoDB]] and presented with the help of [[https://www.elastic.co/elasticsearch/][Elasticsearch]] and [[https://www.elastic.co/kibana][Kibana]].

#+html: <p align="center"><img width="1000" src="docs/img/kibana_dashboard_1.png"></p>

*** Components
The distributed system consists of the following components. Their code is stored in the respective subdirectory, where the usage and other details are described in the readme-files placed in there.

The project is structured as follows:
#+begin_src
.
├── backend # Contains the processing backend
│   ├── config
│   └── maltrap_backend
├── collectors  # Collector code
│   ├── fosr-collector # Fake open relay
│   ├── imap-collector # IMAP retrieval
│   └── smtp-collector # Fake SMTP destination server
├── docs
│   └── img
└── periphery # Contains the peripheral components
    ├── elasticstack
    └── mongodb
#+end_src

** Usage and installation
Please refer to the readme-files of a/m components to find detailed instructions on installing and using these components. To run the Elasticstack and MongoDB just use the ~docker-compose~-files within [[file:periphery/][periphery-directory]].


** References

[1] Using version 7.10, which is licensed under Apache 2.0.

[2] See https://blog.malwarebytes.com/glossary/malspam/, accessed 28/03/2021.

[3] Cf. Verizon (2019). Data Breach Investigations Report 2019. Technical report. Verizon Communications Inc. URL : https:
//enterprise.verizon.com/resources/reports/2019-data-breach-investigations-report.pdf
